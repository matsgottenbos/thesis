import json
from math import floor
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
from matplotlib.ticker import PercentFormatter
from matplotlib.ticker import FuncFormatter


instance1_10B_logCountWithoutSolution = 1

instance1_10B_costProgress = [88555, 83588, 77128, 70527, 60785, 58677, 56006, 54925, 54775, 54444, 54267, 54254, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 54217, 53460, 53079, 53057, 53057, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 53044, 52477, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 52356, 51666, 51428, 51210, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015, 51015]

instance1_10B_satisfactionProgress = [64.75, 66.82, 67.45, 68.66, 69.01, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.51, 69.66, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67, 69.67]


instance2_10B_logCountWithoutSolution = 3

instance2_10B_costProgress = [78455, 74262, 59598, 58506, 56861, 56861, 56353, 56111, 55498, 55498, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 55380, 54735, 53623, 53623, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 53311, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52823, 52713, 52643, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52620, 52318, 52272, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52271, 52245, 52238, 52184, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 52177, 51614, 51560, 51534, 51530, 51530, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527, 51527]

instance2_10B_satisfactionProgress = [66.11, 66.59, 67.75, 67.75, 67.75, 67.75, 67.75, 67.75, 67.75, 67.89, 67.89, 67.89, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 67.94, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.65, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 69.81, 70.50, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51, 70.51]


instance3_10B_logCountWithoutSolution = 5

instance3_10B_costProgress = [72407, 67868, 64701, 64489, 62966, 62784, 62612, 62593, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 62591, 61875, 61697, 61633, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 61252, 60545, 59694, 59469, 59197, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 59124, 58825, 58818, 58818, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58814, 58612, 57829, 57684, 57671, 57657, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652, 57652]

instance3_10B_satisfactionProgress = [64.59, 64.55, 64.55, 66.51, 66.51, 66.55, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 66.58, 67.47, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 67.52, 68.51, 68.52, 68.68, 68.68, 68.68, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 68.82, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53, 69.53]




### Helpers

def plotHistogram(values, binMin=-600, binMax=600, binSize=30, ylim=None, color=(0, 0.5, 1, 1), alpha=1, histtype='bar'):
    count = len(values)
    bins=np.arange(binMin, binMax + binSize, binSize)
    weights = np.ones(count) / count
    plt.hist(values, bins=bins, color=color, weights=weights, histtype=histtype, alpha=alpha)
    plt.xlim([binMin, binMax])
    plt.gca().yaxis.set_major_formatter(PercentFormatter(1)) # Show percentagess
    if ylim != None: plt.ylim(ylim)

def plotDistribution(cdfFunc, binMin=-600, binMax=600, binSize=30, ylim=None, color=(0, 0.5, 1, 1), lineWidth=1, precision=10):
    binCount = int((binMax - binMin) / binSize) * precision

    cdfPoints = np.linspace(binMin, binMax, binCount + 2)
    scaledCdf = cdfFunc(cdfPoints)
    cdf = [precision * cdfVal for cdfVal in scaledCdf]

    groupedCdf = [cdf[i + 1] - cdf[i] for i in range(len(cdf) - 1)]
    
    x2 = np.linspace(binMin, binMax, binCount + 1)
    plt.plot(x2, groupedCdf, color=color, linewidth=lineWidth)
    if ylim != None: plt.ylim(ylim)

def beforePlot(xLabel=None, yLabel=None):
    fig = plt.figure(figsize=(5,5))
    ax = plt.subplot()
    if (xLabel != None): plt.xlabel(xLabel)
    if (yLabel != None): plt.ylabel(yLabel)
    return fig, ax

def afterPlot(plotName):
    # plt.show()
    filePath = './data-analysis/plots/{0}.png'.format(plotName)
    plt.savefig(filePath, dpi=300, bbox_inches='tight', pad_inches=0.1)
    plt.close()


### Output

# Basic info
def printBasicInfo(allDelays, allPositiveDelays):
    print('Number of activities:', len(allDelays))
    print('Number of delayed activities:', len(allPositiveDelays))
    print('Percentage of activities delayed:', str(100 * len(allPositiveDelays) / len(allDelays)) + "%")


# All delays histogram
def plotAllDelays(allDelays):
    beforePlot(xLabel='Delay amount (minutes)', yLabel='Share of total')
    plotHistogram(allDelays, binMin=-300, binMax=300, binSize=10)
    afterPlot(plotName='delays')


# Positive delays histogram
def plotAllPositiveDelays(allPositiveDelays):
    beforePlot(xLabel='Delay amount (minutes)', yLabel='Share of total')
    plotHistogram(allPositiveDelays, binMin=0, binMax=300, binSize=5)
    plt.ylim([0, 0.19])
    afterPlot(plotName='delays-positive')


# Driving vs non-driving info
def printDrivingNonDrivingInfo(allDelaysDriving, allDelaysNonDriving, allPositiveDelaysDriving, allPositiveDelaysNonDriving):
    print('Number of driving activities:', len(allDelaysDriving))
    print('Number of non-driving activities:', len(allDelaysNonDriving))
    print('Number of delayed driving activities:', len(allPositiveDelaysDriving))
    print('Number of delayed non-driving activities:', len(allPositiveDelaysNonDriving))
    print('Percentage of driving activities delayed:', str(100 * len(allPositiveDelaysDriving) / len(allDelaysDriving)) + "%")
    print('Percentage of non-driving activities delayed:', str(100 * len(allPositiveDelaysNonDriving) / len(allDelaysNonDriving)) + "%")


# Delays driving vs non-driving
def plotDelaysDrivingNonDriving(allDelaysDriving, allDelaysNonDriving):
    beforePlot(xLabel='Delay amount (minutes)', yLabel='Share of total')
    plotHistogram(allDelaysDriving, binMin=-300, binMax=300, binSize=10, color=(0, 0.5, 1, 1), alpha=0.6)
    plotHistogram(allDelaysNonDriving, binMin=-300, binMax=300, binSize=10, color=(1, 0.5, 0, 1), alpha=0.6)
    afterPlot(plotName='delays-driving-nondriving')


# Positive driving vs non-driving
def plotPositiveDelaysDrivingNonDriving(allPositiveDelaysDriving, allPositiveDelaysNonDriving):
    beforePlot(xLabel='Delay amount (minutes)', yLabel='Share of total')
    plotHistogram(allPositiveDelaysDriving, binMin=0, binMax=300, binSize=5, color=(0, 0.5, 1, 1), alpha=0.6)
    plotHistogram(allPositiveDelaysNonDriving, binMin=0, binMax=300, binSize=5, color=(1, 0.5, 0, 1), alpha=0.6)
    afterPlot(plotName='delays-positive-driving-nondriving')


# Positive delays gamma distribution
def fitGammaDistributionToAllPositiveDelays(allPositiveDelays):
    allPositiveDelaysCapped = [delay for delay in allPositiveDelays if delay < 600]
    alpha, _, scale = stats.gamma.fit(allPositiveDelaysCapped, loc=0, floc=0)
    print('All positive delays gamma distribution, alpha parameter:', alpha)
    print('All positive delays gamma distribution, beta parameter:', 1 / scale)

    # Print histogram comparison
    beforePlot(xLabel='Delay amount (minutes)', yLabel='Share of total')
    plotHistogram(allPositiveDelays, binMin=0, binMax=300, binSize=5, ylim=None)
    plotDistribution(lambda x: stats.gamma.cdf(x, alpha, 0, scale), binMin=0, binMax=300, binSize=5, ylim=None, color=(1, 0.5, 0, 1), lineWidth=3)
    plt.ylim([0, 0.19])
    afterPlot(plotName='gamma-fit-histogram')

    # Print histogram comparison, presentation version
    beforePlot(xLabel='Delay amount (minutes)', yLabel='Share of total')
    plotHistogram(allPositiveDelays, binMin=0, binMax=300, binSize=5, ylim=None, color=(1, 0.8, 0, 1))
    plotDistribution(lambda x: stats.gamma.cdf(x, alpha, 0, scale), binMin=0, binMax=300, binSize=5, ylim=None, color=(0.753, 0.035, 0.208, 1), lineWidth=3)
    plt.ylim([0, 0.19])
    afterPlot(plotName='gamma-fit-histogram-presentation')

    # Print probability plot
    _, ax = beforePlot()
    _, (_, _, r) = stats.probplot(allPositiveDelaysCapped, dist=stats.gamma, sparams=(alpha, 0, scale), plot=plt)
    print('Coefficient of determination R^2:', r * r)
    plt.title('')
    plt.xlabel('Distribution quantiles')
    plt.ylabel('Data quantiles')
    ax.get_lines()[0].set_markerfacecolor((0, 0.5, 1, 0.2))
    ax.get_lines()[0].set_markeredgewidth(0)
    ax.get_lines()[1].set_color((0.7, 0.7, 0.7, 1))
    ax.get_lines()[1].set_linewidth(2)
    afterPlot(plotName='gamma-fit-probplot')


# Determine function of mean delay by duration
def fitMeanDelayFunction(allPositiveDelaysFrequentDurations, allPositiveDelaysFrequent):
    muXs = allPositiveDelaysFrequentDurations
    muXsModel = sorted(muXs)
    muYs = allPositiveDelaysFrequent
    muCoef = np.polyfit(muXs, muYs, 2)
    muFunc = lambda x: muCoef[0] * x * x + muCoef[1] * x + muCoef[2]
    print('Mean delay by duration: %sx^2 + %sx + %s' % (muCoef[0], muCoef[1], muCoef[2]))
    muYsModel = [muFunc(x) for x in muXsModel]

    beforePlot(xLabel='Planned duration (minutes)', yLabel='Delay amount (minutes)')
    plt.plot(muXs, muYs, 'o', color=(0, 0.5, 1, 0.1))
    plt.plot(muXsModel, muYsModel, color=(1, 0.5, 0, 1), linewidth=3)
    plt.xlim([0, 420])
    plt.ylim([0, 600])
    afterPlot(plotName='delays-duration-mean')


# Determine function of delay standard deviation by duration
def showStdScatterPlot(allPositiveDelaysByDuration, durationIndexSize):
    beforePlot(xLabel='Planned duration (minutes)', yLabel='Delay standard deviation (minutes)')
    stdDelayByDuration = []
    for durationIndex in range(len(allPositiveDelaysByDuration)):
        durationDelays = allPositiveDelaysByDuration[durationIndex]
        if (len(durationDelays) < 5): continue
        _, std = stats.norm.fit(durationDelays)
        stdDelayByDuration.append(std)
    stdYs = stdDelayByDuration[0:18]
    stdXs = range(0, len(stdYs) * durationIndexSize, durationIndexSize)
    plt.plot(stdXs, stdYs, 'o', color=(0, 0.5, 1, 1))
    plt.xlim([0, 420])
    plt.ylim([0, 600])
    afterPlot(plotName='delays-duration-std')


def printRobustnessCostExamplesInfo():
    printRobustnessCostSingleExample(60, 0, 0.275, 0, 'Example 1')
    printRobustnessCostSingleExample(30, 60, 0.275, 500, 'Example 2')
    printRobustnessCostSingleExample(120, 30, 0.275, 1000, 'Example 3')
    print()

def printRobustnessCostSingleExample(plannedDuration, waitingTime, delayProb, conflictCost, exampleTitle):
    meanDelay = plannedDuration * plannedDuration / 5571 + 0.123 * plannedDuration + 37.38
    alpha = meanDelay * meanDelay / 3879
    beta = meanDelay / 3879

    conflictProbIfDelayed = 1 - stats.gamma.cdf(waitingTime, alpha, 0, 1 / beta)
    conflictProb = delayProb * conflictProbIfDelayed
    robustnessCost = conflictProb * conflictCost

    print()
    print('Robustness cost example:', exampleTitle)
    print('Given planned duration:', plannedDuration)
    print('Given waiting time:', waitingTime)
    print('Mean delay:', meanDelay)
    print('Gamma distribution alpha parameter:', alpha)
    print('Gamma distribution beta parameter:', beta)
    print('Conflict probability if delayed:', conflictProbIfDelayed)
    print('Given delay probability:', delayProb)
    print('Conflict probability:', conflictProb)
    print('Given conflict cost:', conflictCost)
    print('Robustness cost:', robustnessCost)


def plotSimulatedAnnealingProgress():
    # Progress per 10M iterations for a total of 10B iterations
    iterationCount = 10000000000
    logFrequency = 10000000
    logCount = int(iterationCount / logFrequency)

    iterationTicks = np.linspace(0, iterationCount, 6)

    iterationFormatter = FuncFormatter(lambda x, pos: '%1.1fB' % (x * 1e-9))
    relativeValueFormatter = FuncFormatter(lambda x, pos: '%1.0f' % (x * 100) + '%')

    instance1_10B_iterationNums = np.linspace(logFrequency * instance1_10B_logCountWithoutSolution, iterationCount, logCount - instance1_10B_logCountWithoutSolution)
    instance2_10B_iterationNums = np.linspace(logFrequency * instance2_10B_logCountWithoutSolution, iterationCount, logCount - instance2_10B_logCountWithoutSolution)
    instance3_10B_iterationNums = np.linspace(logFrequency * instance3_10B_logCountWithoutSolution, iterationCount, logCount - instance3_10B_logCountWithoutSolution)

    instance1_10B_relativeCostProgress = [cost / min(instance1_10B_costProgress) for cost in instance1_10B_costProgress]
    instance2_10B_relativeCostProgress = [cost / min(instance2_10B_costProgress) for cost in instance2_10B_costProgress]
    instance3_10B_relativeCostProgress = [cost / min(instance3_10B_costProgress) for cost in instance3_10B_costProgress]

    _, ax = beforePlot(xLabel='Iterations', yLabel='Relative cost')
    ax.xaxis.set_major_formatter(iterationFormatter)
    ax.yaxis.set_major_formatter(relativeValueFormatter)
    plt.plot(instance1_10B_iterationNums, instance1_10B_relativeCostProgress, color=(0, 0.5, 1, 0.8), label='Instance 1')
    plt.plot(instance2_10B_iterationNums, instance2_10B_relativeCostProgress, color=(1, 0.5, 0, 0.8), label='Instance 2')
    plt.plot(instance3_10B_iterationNums, instance3_10B_relativeCostProgress, color=(0.25, 0.75, 0.25, 0.8), label='Instance 3')
    plt.xticks(iterationTicks)
    plt.ylim([0.99, 1.14])
    plt.legend()
    afterPlot(plotName='sa-progress-cost-relative')

    instance1_10B_relativeSatisfactionProgress = [cost / max(instance1_10B_satisfactionProgress) for cost in instance1_10B_satisfactionProgress]
    instance2_10B_relativeSatisfactionProgress = [cost / max(instance2_10B_satisfactionProgress) for cost in instance2_10B_satisfactionProgress]
    instance3_10B_relativeSatisfactionProgress = [cost / max(instance3_10B_satisfactionProgress) for cost in instance3_10B_satisfactionProgress]

    _, ax = beforePlot(xLabel='Iterations', yLabel='Relative satisfaction')
    ax.xaxis.set_major_formatter(iterationFormatter)
    ax.yaxis.set_major_formatter(relativeValueFormatter)
    plt.plot(instance1_10B_iterationNums, instance1_10B_relativeSatisfactionProgress, color=(0, 0.5, 1, 0.8), label='Instance 1')
    plt.plot(instance2_10B_iterationNums, instance2_10B_relativeSatisfactionProgress, color=(1, 0.5, 0, 0.8), label='Instance 2')
    plt.plot(instance3_10B_iterationNums, instance3_10B_relativeSatisfactionProgress, color=(0.25, 0.75, 0.25, 0.8), label='Instance 3')
    plt.xticks(iterationTicks)
    plt.ylim([0.94, 1.004])
    plt.legend()
    afterPlot(plotName='sa-progress-satisfaction-relative')


def plotSimulatedAnnealingParetoFront():
    # Instance 1: 27/6 - 3/7
    costsInstance1_1B = [52472, 52976, 54020, 55385, 56255]
    satisfactionsInstance1_1B = [50.46, 51.51, 65.73, 68.09, 68.93]
    costsInstance1_4B = [51820, 52778, 53358, 54485, 55692]
    satisfactionsInstance1_4B = [53.53, 63.52, 65.53, 67.61, 69.65]
    costsInstance1_10B = [51015, 51776, 52589, 53116, 54042, 54791, 55722, 56223]
    satisfactionsInstance1_10B = [49.51, 52.50, 64.23, 64.69, 66.80, 67.50, 68.52, 69.67]

    # Instance 2: 20/6 - 26/6
    costsInstance2_1B = [52740, 53766, 54943, 55629, 58112]
    satisfactionsInstance2_1B = [53.65, 57.21, 67.51, 68.51, 69.59]
    costsInstance2_4B = [52544, 53388, 54355, 55535, 57041]
    satisfactionsInstance2_4B = [51.52, 55.86, 66.51, 68.91, 69.74]
    costsInstance2_10B = [51527, 52177, 53037, 53603, 54245, 55149, 56274, 56957, 59252]
    satisfactionsInstance2_10B = [48.05, 50.51, 57.50, 65.51, 66.89, 67.59, 68.56, 69.66, 70.51]

    # Instance 3: 13/6 - 19/6
    costsInstance3_1B = [58605, 60893, 61502]
    satisfactionsInstance3_1B = [55.52, 67.04, 67.51]
    costsInstance3_4B = [59149, 59764, 60808, 62022, 63412]
    satisfactionsInstance3_4B = [54.86, 64.55, 66.17, 67.94, 68.51]
    costsInstance3_10B = [57652, 58594, 59337, 60849, 61369, 63302, 65191]
    satisfactionsInstance3_10B = [51.73, 54.51, 65.70, 66.53, 67.55, 68.82, 69.53]

    costFormatter = FuncFormatter(lambda x, _: '%1.0fk' % (x / 1000))
    satisfactionFormatter = FuncFormatter(lambda x, _: str(x) + '%')

    _, ax = beforePlot(xLabel='Cost', yLabel='Satisfaction')
    ax.xaxis.set_major_formatter(costFormatter)
    ax.yaxis.set_major_formatter(satisfactionFormatter)
    plt.plot(costsInstance1_10B, satisfactionsInstance1_10B, 'o-', color=(0, 0.5, 1, 1), label='10B iterations')
    plt.plot(costsInstance1_4B, satisfactionsInstance1_4B, 'o-', color=(1, 0.5, 0, 1), label='4B iterations')
    plt.plot(costsInstance1_1B, satisfactionsInstance1_1B, 'o-', color=(0.25, 0.75, 0.255, 1), label='1B iterations')
    plt.legend()
    afterPlot(plotName='sa-pareto-front-instance1-short-long')

    _, ax = beforePlot(xLabel='Cost', yLabel='Satisfaction')
    ax.xaxis.set_major_formatter(costFormatter)
    ax.yaxis.set_major_formatter(satisfactionFormatter)
    plt.plot(costsInstance2_10B, satisfactionsInstance2_10B, 'o-', color=(0, 0.5, 1, 1), label='10B iterations')
    plt.plot(costsInstance2_4B, satisfactionsInstance2_4B, 'o-', color=(1, 0.5, 0, 1), label='4B iterations')
    plt.plot(costsInstance2_1B, satisfactionsInstance2_1B, 'o-', color=(0.25, 0.75, 0.25, 1), label='1B iterations')
    plt.legend()
    afterPlot(plotName='sa-pareto-front-instance2-short-long')

    _, ax = beforePlot(xLabel='Cost', yLabel='Satisfaction')
    ax.xaxis.set_major_formatter(costFormatter)
    ax.yaxis.set_major_formatter(satisfactionFormatter)
    plt.plot(costsInstance3_10B, satisfactionsInstance3_10B, 'o-', color=(0, 0.5, 1, 1), label='10B iterations')
    plt.plot(costsInstance3_4B, satisfactionsInstance3_4B, 'o-', color=(1, 0.5, 0, 1), label='4B iterations')
    plt.plot(costsInstance3_1B, satisfactionsInstance3_1B, 'o-', color=(0.25, 0.75, 0.25, 1), label='1B iterations')
    plt.legend()
    afterPlot(plotName='sa-pareto-front-instance3-short-long')

    # Presentation variants
    _, ax = beforePlot(xLabel='Cost', yLabel='Satisfaction')
    ax.xaxis.set_major_formatter(costFormatter)
    ax.yaxis.set_major_formatter(satisfactionFormatter)
    plt.plot(costsInstance1_4B, satisfactionsInstance1_4B, 'o-', color=(0.753, 0.035, 0.208, 1), label='4B iterations')
    afterPlot(plotName='sa-pareto-front-instance1-presentation')

    _, ax = beforePlot(xLabel='Cost', yLabel='Satisfaction')
    ax.xaxis.set_major_formatter(costFormatter)
    ax.yaxis.set_major_formatter(satisfactionFormatter)
    plt.plot(costsInstance2_4B, satisfactionsInstance2_4B, 'o-', color=(0.753, 0.035, 0.208, 1), label='4B iterations')
    afterPlot(plotName='sa-pareto-front-instance2-presentation')

    _, ax = beforePlot(xLabel='Cost', yLabel='Satisfaction')
    ax.xaxis.set_major_formatter(costFormatter)
    ax.yaxis.set_major_formatter(satisfactionFormatter)
    plt.plot(costsInstance3_4B, satisfactionsInstance3_4B, 'o-', color=(0.753, 0.035, 0.208, 1), label='4B iterations')
    afterPlot(plotName='sa-pareto-front-instance3-presentation')


### Run

def run(durationIndexSize):
    # Read data
    with open('./output/delays.json', 'r') as readFile:
        data = json.load(readFile)
    activities = data['activities']

    # Process data
    allDelays = []
    allDelaysDriving = []
    allDelaysNonDriving = []
    allPositiveDelays = []
    allPositiveDelaysDriving = []
    allPositiveDelaysNonDriving = []
    allPositiveDelaysFrequent = []
    allPositiveDelaysFrequentDurations = []
    allPositiveDelaysByDuration = [] # durations rounded down to nearest `durationIndexSize`
    delayedCountByDuration = []
    for activity in activities:
        plannedDuration = activity['plannedDuration']
        delays = activity['durationDelays']
        allDelays.extend(delays)
        positiveDelays = [delay for delay in delays if delay > 0]
        allPositiveDelays.extend(positiveDelays)

        if activity['description'] == 'Drive train':
            allDelaysDriving.extend(delays)
            allPositiveDelaysDriving.extend(positiveDelays)
        else:
            allDelaysNonDriving.extend(delays)
            allPositiveDelaysNonDriving.extend(positiveDelays)

        durationIndex = floor(plannedDuration / durationIndexSize)
        while len(allPositiveDelaysByDuration) < durationIndex + 1:
            allPositiveDelaysByDuration.append([])
            delayedCountByDuration.append(0)
        allPositiveDelaysByDuration[durationIndex].extend(positiveDelays)
        delayedCountByDuration[durationIndex] += len(positiveDelays)

        if len(positiveDelays) >= 5:
            allPositiveDelaysFrequent.extend(positiveDelays)
            for _ in range(len(positiveDelays)):
                allPositiveDelaysFrequentDurations.append(plannedDuration)

    # Perform output
    printBasicInfo(allDelays, allPositiveDelays)
    plotAllDelays(allDelays)
    plotAllPositiveDelays(allPositiveDelays)
    printDrivingNonDrivingInfo(allDelaysDriving, allDelaysNonDriving, allPositiveDelaysDriving, allPositiveDelaysNonDriving)
    plotDelaysDrivingNonDriving(allDelaysDriving, allDelaysNonDriving)
    plotPositiveDelaysDrivingNonDriving(allPositiveDelaysDriving, allPositiveDelaysNonDriving)
    fitGammaDistributionToAllPositiveDelays(allPositiveDelays)
    fitMeanDelayFunction(allPositiveDelaysFrequentDurations, allPositiveDelaysFrequent)
    showStdScatterPlot(allPositiveDelaysByDuration, durationIndexSize)
    printRobustnessCostExamplesInfo()
    plotSimulatedAnnealingProgress()
    plotSimulatedAnnealingParetoFront()

run(durationIndexSize=30)
